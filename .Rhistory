#     sd = theoretical_standard_deviation)
#}
# Plot the histogram and the normal distribution
ggplot(data, aes(x = mean)) +
geom_histogram(aes(y=Freq, color="means"), stat="identity", fill="white") +
#geom_line(aes(y=norm, color="normal"), size=1.5) +
scale_x_continuous(breaks = 2:8) +
#scale_color_discrete(name="Legend", breaks=c("means", "normal"),
#   labels =c("Histogram of Means", "Normal Distribution")) +
labs(x = "Mean Values", y = "Frequency")
data <- as.data.frame(table(cut(means, breaks = (1:2))))
#data <- as.data.frame(table(cut(means, breaks = 0.1 * (19:79) + 0.05)))
data$Freq <- data$Freq / number_simulations * 10
#data <- data.frame(means = means)
ggplot(data) +
geom_histogram(aes(y=Freq, color="means"), stat="identity", fill="white") +
geom_line(aes(y=norm, color="normal"), size=1.5) +
scale_x_continuous(breaks = 2:8) +
labs(x = "Mean Values", y = "Frequency")
#for (i in 1:60)
#{
#   data$mean[i] = (i + 19.5) / 10
#  data$norm[i] <- dnorm(x = (i + 19) / 10, mean = theoretical_mean,
#     sd = theoretical_standard_deviation)
#}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data <- as.data.frame(table(cut(means, breaks = (1:2))))
#data <- as.data.frame(table(cut(means, breaks = 0.1 * (19:79) + 0.05)))
data$Freq <- data$Freq / number_simulations * 10
#data <- data.frame(means = means)
ggplot(data,aes(y=Freq)) +
geom_histogram(stat="identity", fill="white") +
scale_x_continuous(breaks = 2:8) +
labs(x = "Mean Values", y = "Frequency")
#for (i in 1:60)
#{
#   data$mean[i] = (i + 19.5) / 10
#  data$norm[i] <- dnorm(x = (i + 19) / 10, mean = theoretical_mean,
#     sd = theoretical_standard_deviation)
#}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?shapiro.test
shapiro.test(rnorm(100, mean=5, sd=3))
shapiro.test(rnorm(100, mean=5, sd=3))
shapiro.test(rnorm(1000, mean=5, sd=3))
shapiro.test(rnorm(1000, mean=5, sd=3))
shapiro.test(rnorm(1000, mean=5, sd=3))
shapiro.test(rnorm(1000, mean=5, sd=3))
shapiro.test(means)$p.value
shapiro.test(means)$W
x<-shapiro.test(means)
str(x)
x<-shapiro.test(means)$W
x
shapiro.test(means)
shapiro.test(means)$statistic
shapiro.test(means)$statistic$W
shapiro.test(means)$statistic[1]
shapiro.test(means)$statistic
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(datasets)
str(mrcars)
str(mtcars)
x.hat <- mean(mtcars$mpg)
x
x.hat
?t.test
?power.t.test
length(mtcars)
mtcars
length(mtcars$mpg)
power.t.test(n = 32, )
sd(mtcars$mpg)
power.t.test(n = length(mtcars$mpg), sd = sd(mtcars$mpg), type = "one.sample", alternative = "one.sided", sig.level = 0.05)
power.t.test(n = length(mtcars$mpg), sd = sd(mtcars$mpg), type = "one.sample", alternative = "one.sided", sig.level = 0.05, power = 0.95)
test <- power.t.test(n = length(mtcars$mpg), sd = sd(mtcars$mpg), type = "one.sample", alternative = "one.sided", sig.level = 0.05, power = 0.95)
test
test$delta
x.hat - test$delta
t.test
?t.test
t.text(x = mtcars$mpg, alternative = "less")
t.test(x = mtcars$mpg, alternative = "less")
t.test(x = mtcars$mpg, alternative = "less")
t.test(x = mtcars$mpg, alternative = "greater")
z <- qnorm(.05)
z
?qnorm
x.hat - z * sd(mtcars$mpg) / sqrt(32)
?t.test()
str(mtcars)
x <- mtcars$mpg[mtcars$cyl == 4]
y <- mtcars$mpg[mtcars$cyl == 6]
length(x)
length(y)
mtcars
t.test(x = x, y = y, alternative = "two.sided")
qnorm(0.025)
l <- qnorm(0.025)
r <- qnorm(0.975)
r
3 + l * 1.1 / 10
3 + r * 1.1 / 10
?pbinom
qbinom(p = 0.05, size = 100, prob = 0.5)
qbinom(p = 0.05, size = 100, prob = 0.5, lower.tail = FALSE)
qbinom(p = 0.05, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(p = 0.05, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(q = 0.05, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(q = 0.95, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(q = 55, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(q = 54, size = 100, prob = 0.5, lower.tail = FALSE)
?ppois
ppois(q = 15000/30, lambda = 520, lower.tail = FALSE)
ppois(q = 15800/30, lambda = 520, lower.tail = FALSE)
15800/30
ppois(q = 15800 - 1, lambda = 520 * 30, lower.tail = FALSE)
?z.test
?t.test
?power.t.test()
power.t.test(n = 100, delta = 1, sd = 4, sig.level = 0.05, type = "one.sample", alternativ = "one.sided")
power.t.test(power = 0.8, delta = 0.01, sd = 0.04, sig.level = 0.05, type = "paired", alternativ = "one.sided")
power.t.test(power = 0.8, delta = 0.01, sd = 0.04, sig.level = 0.05, alternativ = "one.sided")
?t.test
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
t.text(x = x, y = y, alternative = "two.sided", paired = TRUE)
t.test(x = x, y = y, alternative = "two.sided", paired = TRUE)
t.test(x = x, y = y, alternative = "less", paired = TRUE)
?q.t
?qt
qt(0.025)
qt(q = 0.025)
qt(p = 0.025)
qt(p = 0.025, df = 8, lower.tail = TRUE)
1100 - 2.306004 * 30 / 3
?pbinom()
pbinom(2, 4, 0.5, lower.tail = FALSE)
pbinom(3, 4, 0.5, lower.tail = FALSE)
pbinom(4, 4, 0.5, lower.tail = FALSE)
pbinom(3, 4, 0.5, lower.tail = FALSE)
pbinom(2, 4, 0.5, lower.tail = FALSE)
pbinom(1, 4, 0.5, lower.tail = FALSE)
pbinom(2, 4, 0.5, lower.tail = FALSE)
?ppoison
?ppois
ppois(q = 9, lambda = 17.87)
ppois(q = 10, lambda = 17.87)
m1 <- -3
m2 <- 1
n1 <- n2 <- 9
?pnorm
pnorm(p=-3, mean = 1, sd = 1.8, )
?qt
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (16))
qt(q = 0.025, 8)
qt(p = 0.025, 8)
pt(q = 0.025, 8)
pt(q = 0.025, 88)
qt(p = 0.025, 89)
qt(p = 0.025, 899)
qt(p = 0.025, 8)
1 - 2.3 * 1.8 / 3
qt(p = 0.005, 8)
1 - 3.4 * 1.8 / 3
?power.t.test()
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "two.sided")
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "two.sided", type = "paired")
power.t.test(power = 0.8, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "paired")
power.t.test(power = 0.9, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "paired")
power.t.test(power = 0.9, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "paired")
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "paired")
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, alternative = "one.sided", type = "paired")
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.1, alternative = "one.sided", type = "paired")
pnorm
?pnorm
sqrt(288)
?qnorm()
?qnorm(p = 0.1, mean = 42.04, sd = 12)
qnorm(p = 0.1, mean = 42.04, sd = 12)
pnorm(q = 0.1, mean = 42.04, sd = 12)
qnorm(0.10)
42.04 + 1.281552 * 12 / sqrt(288)
qnorm(0.05)
42.04 + 1.645 * 12 / sqrt(288)
qnorm(0.025)
42.04 + 1.196 * 12 / sqrt(288)
qnorm(0.005)
42.04 + 1.96 * 12 / sqrt(288)
42.04 + 2.58 * 12 / sqrt(288)
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, alternative = "one.sided", type = "paired")
?pnorm
z <- (44 - 42.04)/(12/sqrt(288))
2 * pnorm(-abs(z))
z <- (44 - 42.04)/12/sqrt(288)
2 * pnorm(-abs(z))
z <- (44 - 42.04)/(12/sqrt(288))
2*(1-pnorm(44, mean = 42.04, sd = 12/sqrt(288)))
2*(1-pnorm(42.04, mean = 44, sd = 12/sqrt(288)))
2*(1-pnorm(44, mean = 42.04, sd = 12/sqrt(288)))
2*(1-pnorm(42, mean = 42.04, sd = 12/sqrt(288)))
2*(1-pnorm(42.04, mean = 42.04, sd = 12/sqrt(288)))
2*(1-pnorm(42.04, mean = 42.04, sd = 12/sqrt(2*288)))
2*(1-pnorm(44, mean = 42.04, sd = 12/sqrt(2*288)))
2*(1-pnorm(44, mean = 42.04, sd = 12/sqrt(288)))
z <- (44 - 42.04)*(12/sqrt(288))
2 * pnorm(-abs(z))
12/sqrt(288)
12/sqrt(288) * 3
pnorm(q=0.025, mean = 42.04, sd = 12 /sqrt(288))
pnorm(44, mean = 42.04, sd = 12 /sqrt(288))
12/sqrt(288)
pnorm(42, mean = 42.04, sd = 12 /sqrt(288))
pnorm(1, mean = 42.04, sd = 12 /sqrt(288))
pnorm(44, mean = 42.04, sd = 12 /sqrt(288), lower.tail=FALSE)
* 2pnorm(44, mean = 42.04, sd = 12 /sqrt(288), lower.tail=FALSE)
2*pnorm(44, mean = 42.04, sd = 12 /sqrt(288), lower.tail=FALSE)
2*pnorm(44, mean = 42.04, sd = 12 /sqrt(2/288), lower.tail=FALSE)
2*pnorm(44, mean = 42.04, sd = 12 /sqrt(2/288), lower.tail=TRUE)
2*pnorm(44, mean = 42.04, sd = 12 /sqrt(2/288), lower.tail=TRUE)
sqrt(144)
2*pnorm(44, mean = 42.04, sd = 1, lower.tail=TRUE)
2*(1-pnorm(44, mean = 42.04, sd = 1))
x <- c(0.18 -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
(x - 0.3)
x <- c(0.18, -1.54, 0.42, 0.95)
(x - 0.3)
w * x
sum(w * (x - 0.3))
sum(w * (x - 0.3)^2)
sum(w * (x - 0.1471)^2)
sum(w * (x - 0.0025)^2)
sum(w * (x - 1.077)^2)
(x - 1.077)^2
w * (x - 1.077)^2
sum(w * (x - 1.077)^2)
sum(w * (x - 0.0025)^2)
sum(w * (x - 0.0026)^2)
sum(w * (x - 0.1471)^2)
sum(w * (x - 0.1472)^2)
sum(w * (x - 0.148)^2)
sum(w * (x - 0.1468)^2)
sum(w * (x - 0.146)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
sum(y*x)
sum(y*x)/sum(x*x)
data(mtcars)
lm(mtcars$wt ~ mtcars$mpg)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mx <- mean(x)
mx
var(x)
vx <- var(x)
var((x-mx)/vx)
sdx <- sd(x)
sdx
var((x-mx)/sdx)
xn <- (x-mx)/sdx
xn
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mx <- mean(x)
sum((x-mx)^2)
sum((x-mx+0.01)^2)
sum((x-mx-0.01)^2)
mx
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
library(swirl)
swirl()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
airquality
rCharts
library(rCharts)
install.packages(rCharts)
install.packages("rCharts")
require(devtools)
install.packages("devtools")
install.packages("rCharts")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
dTable(airquality, sPaginationType = "full_numbers")
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
m <- lm(y ~ x)
m
fit <- lm(y ~ x)
summary(fit)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[2,1]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2,2]
?lm
fit
summary(fit)
t.test(x,y=NULL,alternative=c("two.sided", "less", "greater"),mu=0,paired=FALSE,var.equal=FALSE,conf.level=0.95, ...)
t.test(x, y)
?t.test
summary(fit)
mtcars
fit <- lm(mtcars$mpg ~ mtcars$weight)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
?predict
predict(fit, mean(mtcars$wt))
predict(fit)
mean(mtcars$wt)
mtcars
mean(mtcars$wt)
predict(fit, newdata = mean(mtcars$wt), interval = "confidence")
newdata <- data.frame(mean(mtcars$wt))
newdat
newdata
predict(fit, newdata = newdata, interval = "confidence")
predict(fit, newdata = newdata, interval = "confidence")
predict(fit, newdata = 3, interval = "confidence")
newdata <- data.frame(x = mean(mtcars$wt))
newdata
predict(fit, newdata = newdata, interval = "confidence")
predict.lm(fit, newdata = newdata, interval = "confidence")
predict.lm(fit, newdata = data.frame(wt=c(mean(mtcars$wt))), interval = "confidence")
fit
summary(fit)
predict(fit, newdata = data.frame(wt=c(mean(mtcars$wt))), interval = "confidence")
x <- mtcars$wt
y <- mtcars$mpg
x
y
fit <- lm(y ~ x)
summary(fit)
predict(fit, newdata = data.frame(x=c(mean(mtcars$wt))), interval = "confidence")
?mtcars
predict(fit, newdata = data.frame(x=c(3), interval = "confidence")
)
predict(fit, newdata = data.frame(x=c(3), interval = "confidence")
)
predict(fit, newdata = data.frame(x=c(3)), interval = "confidence")
predict(fit, newdata = data.frame(x=c(3)), interval = "prediction")
predict(fit, newdata = data.frame(x=c(2)), interval = "confidence")
fit <- lm(y ~ x/2)
fit <- lm(y ~ (x/2))
x
x <- x / 2
x
fit <- lm(y ~ x)
summary(fit)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2,2]
sumCoef[2,1]
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2,2]
x <- x * 2
x
fit <- lm(y ~ x)
summary(fit)
fit2 <- lm(y + mean(y))
fit2 <- lm(y ~ mean(y))
(y - mean(y))^2
sum((y - mean(y))^2)
predict(fit)
sum((y - predict(fit))^2)
278/1126
1126/278
library(swirl)
ls()
rm(list=ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,
| col='red')
abline(regrline, lwd=3,col='red')
summary(regline)
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
equal(lhs, rhs)
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
?cov
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
swirl()
swirl()
library(swirl)
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(galton$child ~ galton$parent)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
(fit$residuals^2)/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu) ^ 2)
sRes <- deviance(fit$residuals)
fit$residuals
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
install.packages("devtools")
library(devtools)
install_githup("slidify", "ranmnathv")
install_github("slidify", "ranmnathv")
install_github("ranmnathv/slidify")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
setwd("/home/uwe/Dokumente/learning/Data_Science/Developing_Data_Products/lre_slidify/")
author("linear_regression_explorer")
slidify("index.Rmd")
browseURL("index.html")
publish_github("UweNeuhaus", "LinearRegressionExplorer")
publish_github(LinearRegressionExplorer", "UweNeuhaus")
publish_github("LinearRegressionExplorer", "UweNeuhaus")
publish_github("UweNeuhaus/LinearRegressionExplorer")
?publish_github
?publish_github
publish_github("LinearRegressionExplorer", "UweNeuhaus")
publish(user="UweNeuhaus", repo="LinearRegressionExplorer")
publish(user="UweNeuhaus", repo="LinearRegressionExplorer")
publish(user="UweNeuhaus", repo="LinearRegressionExplorer", host="github")
getwd()
